  CHANGES
  Daniel C. Wang
  February 14, 2000

  1.  CHANGES in 2.0 beta Release

  See the 2.0 README

  2.  CHANGES in 1.3 alpha Release

  Lots. Full list when the final version comes out.

  3.  CHANGES in 1.2 Release


  3.1.  Bugs Fixed


  o  Bug in Java code that would cause pickler to go into infinite loop.

  o  Bug in Java code handling of StdTypes.bool.

  o  Fixed code so asdlGen does not silently fail on errors.

  3.2.  Incompatible Changes


  o  Command line syntax has changed. See the Reference manual for
     details.

  3.3.  New Features


  o  --simple_lists=false flag for Java and C++ to control how sequences
     are handled.

  o  Java code now uses fully qualified identifiers everywhere. This
     solves many name conflicts at the cost of some uglier looking code.

  o  Tree walkers generated for all the nodes defined in a module for
     C++ and Java via the --walker_code=true option.

  o  Deep and shallow copy methods generated for all the nodes defined
     in a module for C++ and Java via the --copy_code=true option.

  o  HTML dump of pickles now uses nested HTML tables to get the old
     behavior see the Reference manual.

  3.4.  Known Bugs


  o  Handling of optional types in StdTypes module not implemented in
     all languages.

  o  Deep copy methods produced for sequence types not actually
     preforming a deep copy.


  4.  CHANGES in 1.10 Release


  4.1.  Incompatible Changes


  o  C code now use libcii by default. To get more of the old behavior
     try the flags --mono_types true and --include_base asdl_base.h.
     See src/c/asdl_base.h and src/c/asdl_base.c.

  o  C code now generates constant pointers to statically allocated
     enums rather than using enums themselves, for non carrying value
     constructors.

  o  Removed the Mod.import.{h,hxx} headers from the installed base, to
     remove perl dependencies.

  4.2.  New Features


  o  src/asdl/std-types.asdl

  o  View option to completely suppress the generation of code on a per-
     module level. View option for generating library code that produces
     list and option types for every type in the module not just types
     that are used as lists and options. See src/asdl/std-types.asdl for
     examples.

  o  Vistor patterns for Java and C++.

  o  Mangled variables to avoid name clashes.

  o  See  lib/asdlGen/sml for precompiled support code for sml.

  4.3.  Known Bugs

  Handling of optional types in StdTypes module not implemented in all
  languages.


  5.  CHANGES in 1.0 Release


  5.1.  Bugs Fixed

  Added source_name option to help with name collisions.

  5.2.  Incompatible Changes


  o  Renamed the view properties user_reader and user_writer to reader
     and writter.

  o  Changed the interface to Java and C++ picklers to not include the
     type name in the pickler functions.

  5.3.  New Features

  See the Reference Manual For Details

  o  New View Syntax

  o  Support of user types in Java and C++

  o  Integrated Haskell Support thanks to Fermin Reig Galilea
     <http://www.dcs.gla.ac.uk/~reig/>

  o  doc_string view property now dumps description in HTML output






  6.  CHANGES in 0.92a Release


  6.1.  Bugs Fixed

  Fixed serious bug in pickle code for C

  7.  CHANGES in 0.91a Release


  7.1.  Bugs Fixed

  For bug fixes and current open bugs see

  http://www.cs.princeton.edu/zephyr/ASDL/asdlGen-bugs.html

  7.2.  Incompatible Changes

  Changed the representation of int_option_ty in asdl_base to be a
  unboxed int. The NONE value is now INT_MIN as defined by limits.h.

  7.3.  New Features


  o  Support for writting and reading pickled values preceded by a
     unique type tag. (Currently SML and C only)

  o  Introduction of src/doc/views.html to provide more user control
     over code.

  o  The beginnings of support for David Hanson's libcii.  See the
     untested code for libcii support in src/c/cii_base.h
     src/c/cii_base.c. You need to invoke asdlGen with the following
     options to try the libcii code out


         asdlGen --c --base_include base_cii.h --mono_types false T.asdl





  o  Added generic pickle pretty printer.  Given an an ASDL defintion
     such as


       module T {
         t = ....
       }




  Calling


         asdlGen --typ ./T.asdl




  will produces a type environment called T.asdl.typ If we have a pickle
  t.pkl generated by the picklers from that same type environment, that
  contains a single type T.t


   asdlGen --pp_pkl T.asdl.typ t.pkl T.t




  will produce and HTML dump of the pickle.


        asdlGen --pp_pkl --text T.asdl.typ T.t




  will produce a plain text dump of the pickle.

  o  Added options to control inclusion of the base environment. i.e.

  o  --base_include (C,C++)

  o  --base_import  (Java)

  o  --base_signature (ML)

  o  --base_structure (ML)


  o  Added --mono_types option. The mono_type option controls whether C
     code generated will create a new type for every list or option type
     or use one uniform type. Rather than creating a new list type for
     each different type of list. See src/c/cii_base.h for an example of
     the required functions to provided this interface. By default this
     flag is set to true.

     For details compare the output of


         asdlGen --c --mono_types false src/asdl/slp3.asdl




  and


         asdlGen --c --mono_types true src/asdl/slp3.asdl




  o  Added option views to override the default view


         asdlGen --lang --view view_name




  o  Allow C,C++, and Java to choose enum value via enum_value property


       view C {
               Slp.Id <= enum_value: 1
       }



  o  Added properties to add user code verbatim in  code. Not supported
     in all languages yet.

  o  interface_prologue

  o  interface_epilogue

  o  implementation_prologue

  o  implementation_epilogue



       view C {

         module Slp <= interface_prologue
       %%
       #include "mytypes.h"
       %%

       }





  o  Added support for user types in C and ML via


       view SML {
       -- make exp a mutable value
         Slp.exp <= natural_type_con :ref
         Slp.exp <= unwrapper        :ref
         Slp.exp <= wrapper          :!
       }






       view C {
         Slp.pos <= natural_type     :int
         Slp.pos <= unwrapper        :pos2int
         Slp.pos <= wrapper          :int2pos
       }





     natural_type
        A qualified identifier that describes the type to use in place
        of the default ASDL type.


     natural_type_con
        A qualified identifier that names a type constructor that
        describes the type to use in place of the ASDL type.


     wrapper
        A qualified identifier that names a function that converts from
        the default ASDL type to a special type used in its place.


     unwrapper
        A qualified identifier that names a function that converts from
        a special in-core type to the default ASDL type.

  o  Added support for user picklers


       view C {
           Slp.exp <= user_reader : my_reader_id
           Slp.exp <= user_writer : my_writer_id
       }




  o  Added user_attribute support for C


       view C {
         Slp.exp <= user_attribute : my_user_type_id
       }




  Adds an extra field to the exp called client_data of type
  my_user_type_id. This field is completely ignored by the picklers and
  constructor functions. A user defined wrapper functions can be used to
  initialize it when pickling or unpickling a value. See the discussion
  or wrapper and unwrapper above.




































