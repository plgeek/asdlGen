<label id="sect.invocation"><p>
<tscreen>
asdlGen --<em/command/ [ <em/command options/ ] files ...
</tscreen>

Where <em/command/ is one of 
<table loc="htbp">
<tabular ca="ll">
<tt/c/       | Output ANSI C                 @
<tt/sml/     | Output Standard ML            @
<tt/haskell/ | Output Haskell                @	
<tt/java/    | Output Java                   @
<tt/cxx/     | Output C++                    @
<tt/doc/     | Output <tt/doc/ directory with HTML descriptions @
<tt/typ/     | Output a machine readable type description of the inputs @
<tt/check/   | Check correctness of inputs @
<tt/all/     | Do all of the above         @	
<tt/pp_pkl/  | Pretty Print an ASDL pickle see section <ref id="sect.pickles" 
               name="Pickles"> @
</tabular>
</table>

The <em/command options/ are specific to each command. For a complete
list of options examine the output files produced by a given command.
Each file should include a comment of all the available options and
the values used to produce the output. 

&asdlGen; reads the set of <tt/files/ which contain ASDL module
declarations and view declarations. The module declarations must be
complete and not refer to any other modules or types not defined in
one of the input files. The order of the input files is
unimportant. This closed set of files is referred to as a type
environment.

<sect1>Common Options
<p>Options common to all the commands include
<descrip>
<tag><tt/--no_action=/{<tt/true/<em/|/ <tt/false/} or <tt/-n/</tag>

Do not write any output files. Instead output the list of files that would
have been written to standard out.

<tag><tt/--line_width=/<em/width/</tag>

Set the maximum line width for pretty printing code. The default value
is 72 characters.

<tag><tt/--output_directory=/<em/dir/ or <tt/-d/ <em/dir/</tag> 

By default the output will be placed in the same directory as the
input file from which it was produced.  Some commands like
<tt/--java/ will create their own subdirectory to place their output.
The <tt/--output_directory/ option overrides the default output directory.

<tag><tt/--view=/<em/name/ or <tt/-V/ <em/name/</tag> 

Sets the default view to <tt/name/. The default view name is by convention
the command name with the first character capitalized. See the
section <ref id="sect.views" name="Views"> in the user guide for a more
detailed description.  
</descrip>

<sect1>Language Specific Options<label id="language-specific-options">
<p>All the commands that produce source code as output offer a different
command option to select the default base environment. The base environment
is the set of the initial definitions available to the code. It defines the
set of primitive types and functions used by the generated code. For example
using the option <tt/--base_include=my_base.h/ when generating C code will
insert <verb/#include "my_base.h"/ in the appropriate place so the resulting
code will use the definitions found in <tt/my_base.h/ rather than the
default set of primitive types. Unless there is a need to globally redefine
the primitive types changing the base environment should be avoided.  The
actual option names vary depending on the output language.

See the section on <ref id="sect.support-code" name="Support Code"> for
a more detailed description about the interfaces to the default set of
primitive types and functions provided with the current release.

<descrip>
<tag/C/
  <descrip>
  <tag><tt/--base_include=/<em/file/<tt/.h/</tag> 
  The default value is <tt/cii_base.h/. Name of the C header file to
  include that define the primitive types and functions for all the generated
  code. 

  <tag><tt/--mono_types=/{<tt/true/<em/|/ <tt/false/}</tag> 
  The default value is false. If true expand sequence and option types into
  new distinct types for each different qualified type.  

  <tag><tt/--attribs_default=/{<tt/true/<em/|/<tt/false/}</tag> 
  The default value is true. Controls whether attributes fields are included in
  the argument to the default constructor generated by &asdlGen; for sum
  types. If true then attributes are include as argument to the default
  constructors. If false the attributes are not included in the argument for
  the constructors.

  <tag><tt/--default_only=/{<tt/true/<em/|/<tt/false/}</tag> 
  The default value is true. Controls whether or not to generate two
  constructors for sum types that have attributes. One constructor includes
  attributes as arguments the other does not. If this value is false then
  the <tt/attribs_default/ argument toggles between whether the default
  constructor contains attributes in the argument or the non-default
  constructor does. The default constructor is a function whose name is the
  same as the constructor in the sum type declaration. The non-default
  constructor is a function whose name is prefixed with either
  <tt/with_attribs/ or <tt/no_attribs/ depending on the value of
  <tt/--attribs_default/. <em/This functionality will probably get moved
  into the view framework rather than being a command line switch./
  </descrip>

<tag/C++/
  <descrip>
  <tag><tt/--base_include=/<em/file/<tt/.hxx/</tag>
  The default value is <tt/asdl_base.hxx/. Name of the C++ header file to
  include that defines the primitive types and functions for all the generated
  code. 
  <tag><tt/--simple_sequences=/{<tt/true/<em/|/ <tt/false/}</tag> 
  The default value is true. Use a simple linked list representation 
  for sequences. Set to false to use a template based sequence 
  representation. See <tt/asdl_base.hxx/ for a default sequence template 
  example. 
  </descrip>

<tag/Java/
  <descrip>
  <tag><tt/--base_import=/<em/package_spec/</tag>
  The default value is <tt/asdl_base.*/. The package import specification
  to define the primitive types and functions for all the generated
  code. 
  <tag><tt/--simple_sequences=/{<tt/true/<em/|/ <tt/false/}</tag> 
  The default value is true. Use a simple linked list representation 
  for sequences. Set to false to use  <tt/java.util.Vector/ instead.
  </descrip>

<tag/Standard ML/
  <descrip>
  <tag><tt/--base_signature=/<em/signature_name/</tag>
  The default value is <tt/BASE/. The signature to <tt/include/ in
  all signatures generated that define the primitive types.
  <tag><tt/--base_structure=/<em/structure_name/</tag>
  The default value is <tt/Base/. The structure to <tt/open/ in
  all structures generated that define the primitive types and functions.
  </descrip>

<tag/Haskell/
  <descrip>
  <tag><tt/--base_import=/<em/module/</tag>
  The default value is <tt/HaskellBase/. The module to import unqualified
  that define the primitive types and functions for all the generated
  code. 
  </descrip>
</descrip>

